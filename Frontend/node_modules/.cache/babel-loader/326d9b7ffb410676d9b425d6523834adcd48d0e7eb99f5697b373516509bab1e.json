{"ast":null,"code":"var _jsxFileName = \"/Users/nirajanbanjade/Desktop/Mapmarker/Frontend/mapmarker/src/components/Mappage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n\n// const Map = (markers) => {\n//   const mapRef = useRef(null); // Reference to the map container\n//   const googleMap = useRef(null);\n\n//   function getLocation() {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           const { latitude, longitude } = position.coords;\n\n//           // Initialize the map with the user's current location\n//           const map = new window.google.maps.Map(mapRef.current, {\n//             center: { lat: latitude, lng: longitude },\n//             zoom: 15, // Closer zoom level for user location\n//           });\n\n//           // Add a marker at the user's location\n//           new window.google.maps.Marker({\n//             position: { lat: latitude, lng: longitude },\n//             map: map,\n//             title: \"You are here!\",\n//           });\n\n//         },\n//         (error) => {\n//           console.error(\"Error getting location: \", error.message);\n//           alert(\"Unable to retrieve your location. Using default location.\");\n\n//           // Fallback to a default location (e.g., San Francisco)\n//           const map = new window.google.maps.Map(mapRef.current, {\n//             center: { lat: 37.7749, lng: -122.4194 }, // Default location\n//             zoom: 12,\n//           });\n//         }\n//       );\n//     } else {\n//       alert(\"Geolocation is not supported by this browser.\");\n\n//       // Fallback to a default location (e.g., San Francisco)\n//       const map = new window.google.maps.Map(mapRef.current, {\n//         center: { lat: 37.7749, lng: -122.4194 }, // Default location\n//         zoom: 12,\n//       });\n//     }\n//   }\n\n//   useEffect(() => {\n//     getLocation(); // Get user location and initialize the map\n//   }, []); // Empty dependency array ensures this runs only once\n\n//   useEffect(() => {\n//     if (googleMap.current && markers) {\n//       // Add all markers from the `markers` prop\n//       markers.forEach((marker) => {\n//         new window.google.maps.Marker({\n//           position: marker,\n//           map: googleMap.current,\n//         });\n//       });\n//     }\n//   }, [markers]); \n\n//   return (\n//     <div\n//       ref={mapRef}\n//       style={{ width: \"100%\", height: \"500px\" }} // Set the map's size\n//     >\n//     </div>\n//   );\n// };\n\n// export default Map;\nimport React, { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  markers\n}) => {\n  _s();\n  const mapRef = useRef(null); // Reference to the map container\n  const googleMap = useRef(null); // Reference to the Google Map instance\n\n  function initializeMap(latitude, longitude) {\n    // Initialize the map only once\n    if (!googleMap.current) {\n      googleMap.current = new window.google.maps.Map(mapRef.current, {\n        center: {\n          lat: latitude,\n          lng: longitude\n        },\n        zoom: 15\n      });\n\n      // Add a marker at the user's location\n      new window.google.maps.Marker({\n        position: {\n          lat: latitude,\n          lng: longitude\n        },\n        map: googleMap.current,\n        title: \"You are here!\"\n      });\n    }\n  }\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        initializeMap(latitude, longitude);\n      }, error => {\n        console.error(\"Error getting location: \", error.message);\n        alert(\"Unable to retrieve your location. Using default location.\");\n\n        // Fallback to a default location (e.g., San Francisco)\n        initializeMap(37.7749, -122.4194);\n      });\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n\n      // Fallback to a default location (e.g., San Francisco)\n      initializeMap(37.7749, -122.4194);\n    }\n  }, []); // Run only once on component mount\n\n  useEffect(() => {\n    if (googleMap.current && markers) {\n      // Add all markers from the `markers` prop\n      markers.forEach(marker => {\n        new window.google.maps.Marker({\n          position: marker,\n          map: googleMap.current\n        });\n      });\n    }\n  }, [markers]); // Run whenever the `markers` prop changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    style: {\n      width: \"100%\",\n      height: \"500px\"\n    } // Set the map's size\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"uj2eoy5xaGEkmNxLfWA6lv77vY4=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Map","markers","_s","mapRef","googleMap","initializeMap","latitude","longitude","current","window","google","maps","center","lat","lng","zoom","Marker","position","map","title","navigator","geolocation","getCurrentPosition","coords","error","console","message","alert","forEach","marker","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nirajanbanjade/Desktop/Mapmarker/Frontend/mapmarker/src/components/Mappage.jsx"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n\n// const Map = (markers) => {\n//   const mapRef = useRef(null); // Reference to the map container\n//   const googleMap = useRef(null);\n\n//   function getLocation() {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           const { latitude, longitude } = position.coords;\n\n//           // Initialize the map with the user's current location\n//           const map = new window.google.maps.Map(mapRef.current, {\n//             center: { lat: latitude, lng: longitude },\n//             zoom: 15, // Closer zoom level for user location\n//           });\n\n//           // Add a marker at the user's location\n//           new window.google.maps.Marker({\n//             position: { lat: latitude, lng: longitude },\n//             map: map,\n//             title: \"You are here!\",\n//           });\n          \n//         },\n//         (error) => {\n//           console.error(\"Error getting location: \", error.message);\n//           alert(\"Unable to retrieve your location. Using default location.\");\n\n//           // Fallback to a default location (e.g., San Francisco)\n//           const map = new window.google.maps.Map(mapRef.current, {\n//             center: { lat: 37.7749, lng: -122.4194 }, // Default location\n//             zoom: 12,\n//           });\n//         }\n//       );\n//     } else {\n//       alert(\"Geolocation is not supported by this browser.\");\n\n//       // Fallback to a default location (e.g., San Francisco)\n//       const map = new window.google.maps.Map(mapRef.current, {\n//         center: { lat: 37.7749, lng: -122.4194 }, // Default location\n//         zoom: 12,\n//       });\n//     }\n//   }\n\n//   useEffect(() => {\n//     getLocation(); // Get user location and initialize the map\n//   }, []); // Empty dependency array ensures this runs only once\n\n//   useEffect(() => {\n//     if (googleMap.current && markers) {\n//       // Add all markers from the `markers` prop\n//       markers.forEach((marker) => {\n//         new window.google.maps.Marker({\n//           position: marker,\n//           map: googleMap.current,\n//         });\n//       });\n//     }\n//   }, [markers]); \n\n//   return (\n//     <div\n//       ref={mapRef}\n//       style={{ width: \"100%\", height: \"500px\" }} // Set the map's size\n//     >\n//     </div>\n//   );\n// };\n\n// export default Map;\nimport React, { useEffect, useRef } from \"react\";\n\nconst Map = ({ markers }) => {\n  const mapRef = useRef(null); // Reference to the map container\n  const googleMap = useRef(null); // Reference to the Google Map instance\n\n  function initializeMap(latitude, longitude) {\n    // Initialize the map only once\n    if (!googleMap.current) {\n      googleMap.current = new window.google.maps.Map(mapRef.current, {\n        center: { lat: latitude, lng: longitude },\n        zoom: 15,\n      });\n\n      // Add a marker at the user's location\n      new window.google.maps.Marker({\n        position: { lat: latitude, lng: longitude },\n        map: googleMap.current,\n        title: \"You are here!\",\n      });\n    }\n  }\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          initializeMap(latitude, longitude);\n        },\n        (error) => {\n          console.error(\"Error getting location: \", error.message);\n          alert(\"Unable to retrieve your location. Using default location.\");\n\n          // Fallback to a default location (e.g., San Francisco)\n          initializeMap(37.7749, -122.4194);\n        }\n      );\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n\n      // Fallback to a default location (e.g., San Francisco)\n      initializeMap(37.7749, -122.4194);\n    }\n  }, []); // Run only once on component mount\n\n  useEffect(() => {\n    if (googleMap.current && markers) {\n      // Add all markers from the `markers` prop\n      markers.forEach((marker) => {\n        new window.google.maps.Marker({\n          position: marker,\n          map: googleMap.current,\n        });\n      });\n    }\n  }, [markers]); // Run whenever the `markers` prop changes\n\n  return (\n    <div\n      ref={mapRef}\n      style={{ width: \"100%\", height: \"500px\" }} // Set the map's size\n    />\n  );\n};\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}