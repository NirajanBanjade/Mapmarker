{"ast":null,"code":"var _jsxFileName = \"/Users/nirajanbanjade/Desktop/Mapmarker/Frontend/mapmarker/src/components/Mappage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  markers\n}) => {\n  _s();\n  const mapRef = useRef(null); // Reference to the map container\n  const googleMap = useRef(null); // Reference to the Google Map instance\n  const markerInstances = useRef([]); // Reference to the marker instances\n  const userCircle = useRef(null);\n  function initializeMap(latitude, longitude) {\n    // Initialize the map only once\n    if (!googleMap.current) {\n      googleMap.current = new window.google.maps.Map(mapRef.current, {\n        center: {\n          lat: latitude,\n          lng: longitude\n        },\n        zoom: 17\n      });\n    }\n  }\n  useEffect(() => {\n    // Get user location and initialize the map\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        initializeMap(latitude, longitude);\n        updateUserCircle(latitude, longitude);\n      }, error => {\n        console.error(\"Error getting location: \", error.message);\n        alert(\"Unable to retrieve your location. Using default location.\");\n\n        // Fallback to a default location (e.g., San Francisco)\n        initializeMap(37.7749, -122.4194);\n      });\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n      initializeMap(37.7749, -122.4194);\n    }\n  }, []); // Run only once on component mount\n\n  function updateUserCircle(lat, lng) {\n    if (!googleMap.current) return;\n\n    // If circle doesn't exist, create it\n    if (!userCircle.current) {\n      userCircle.current = new window.google.maps.Circle({\n        center: {\n          lat,\n          lng\n        },\n        radius: 20,\n        // Size of the circle\n        strokeColor: \"blue\",\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: \"blue\",\n        fillOpacity: 0.3,\n        map: googleMap.current\n      });\n    } else {\n      userCircle.current.setCenter({\n        lat,\n        lng\n      });\n    }\n  }\n  useEffect(() => {\n    if (googleMap.current && markers) {\n      // Clear existing markers\n      markerInstances.current.forEach(marker => marker.setMap(null));\n      markerInstances.current = [];\n\n      // Add new markers\n      markers.forEach(marker => {\n        const newMarker = new window.google.maps.Marker({\n          position: marker,\n          map: googleMap.current\n        });\n        markerInstances.current.push(newMarker);\n      });\n      console.log(\"Number of markers on the map: \", markerInstances.current.length);\n    }\n  }, [markers]); // Run whenever the `markers` prop changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    style: {\n      width: \"100%\",\n      height: \"500px\"\n    } // Set the map's size\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"1c8mzyz9feV3et3wB6AW1w3cnPo=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Map","markers","_s","mapRef","googleMap","markerInstances","userCircle","initializeMap","latitude","longitude","current","window","google","maps","center","lat","lng","zoom","navigator","geolocation","getCurrentPosition","position","coords","updateUserCircle","error","console","message","alert","Circle","radius","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","map","setCenter","forEach","marker","setMap","newMarker","Marker","push","log","length","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nirajanbanjade/Desktop/Mapmarker/Frontend/mapmarker/src/components/Mappage.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\n\nconst Map = ({ markers }) => {\n  const mapRef = useRef(null); // Reference to the map container\n  const googleMap = useRef(null); // Reference to the Google Map instance\n  const markerInstances = useRef([]); // Reference to the marker instances\n  const userCircle = useRef(null);\n\n  function initializeMap(latitude, longitude) {\n    // Initialize the map only once\n    if (!googleMap.current) {\n      googleMap.current = new window.google.maps.Map(mapRef.current, {\n        center: { lat: latitude, lng: longitude },\n        zoom: 17,\n      });\n    }\n  }\n\n  useEffect(() => {\n    // Get user location and initialize the map\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          initializeMap(latitude, longitude);\n          updateUserCircle(latitude, longitude);\n        },\n        (error) => {\n          console.error(\"Error getting location: \", error.message);\n          alert(\"Unable to retrieve your location. Using default location.\");\n\n          // Fallback to a default location (e.g., San Francisco)\n          initializeMap(37.7749, -122.4194);\n        }\n      );\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n      initializeMap(37.7749, -122.4194);\n    }\n  }, []); // Run only once on component mount\n\n  function updateUserCircle(lat, lng) {\n    if (!googleMap.current) return;\n\n    // If circle doesn't exist, create it\n    if (!userCircle.current) {\n      userCircle.current = new window.google.maps.Circle({\n        center: { lat, lng },\n        radius: 20, // Size of the circle\n        strokeColor: \"blue\",\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: \"blue\",\n        fillOpacity: 0.3,\n        map: googleMap.current,\n      });\n    } else {\n      userCircle.current.setCenter({ lat, lng });\n    }\n  }\n\n  useEffect(() => {\n    if (googleMap.current && markers) {\n      // Clear existing markers\n      markerInstances.current.forEach((marker) => marker.setMap(null));\n      markerInstances.current = [];\n\n      // Add new markers\n      markers.forEach((marker) => {\n        const newMarker = new window.google.maps.Marker({\n          position: marker,\n          map: googleMap.current,\n        });\n        markerInstances.current.push(newMarker);\n      });\n      console.log(\"Number of markers on the map: \", markerInstances.current.length);\n    }\n  }, [markers]); // Run whenever the `markers` prop changes\n\n  return (\n    <div\n      ref={mapRef}\n      style={{ width: \"100%\", height: \"500px\" }} // Set the map's size\n    />\n  );\n};\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}